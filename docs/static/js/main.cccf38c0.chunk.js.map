{"version":3,"sources":["components/ElementsGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gridCellElement","cell","type","TextField","fullWidth","helperText","title","value","size","textField","opts","split","select","map","opt","MenuItem","selectField","disabled","gridRow","row","idx","Grid","container","item","spacing","cIdx","xs","gridCell","ElementsGrid","columns","rows","gridData","useEffect","console","log","gridItems","i","rowData","j","App","useState","definition","setDefinition","Fragment","CssBaseline","Container","maxWidth","Box","margin","multiline","onChange","event","target","defStr","newDef","forEach","str","parts","column","parseDefinitions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAgDMA,EAAkB,SAACC,GACrB,OAAKA,EA5CU,eA+CRA,EAAKC,KAZE,SAACD,GAAD,OAAoB,cAACE,EAAA,EAAD,CAClCC,WAAS,EACTC,WAAYJ,EAAKK,MACjBC,MAAON,EAAKM,MACZC,KAAK,UAQ6BC,CAAUR,GAzB5B,SAACA,GACjB,IAAMS,EAAOT,EAAKM,MAAMI,MAAM,KAC9B,OAAO,cAACR,EAAA,EAAD,CACHS,QAAM,EACNR,WAAS,EACTC,WAAYJ,EAAKK,MACjBC,MAAOG,EAAK,GACZF,KAAK,QALF,SAMFE,EAAKG,KAAI,SAACC,GAAD,OAAS,cAACC,EAAA,EAAD,CAAoBR,MAAOO,EAA3B,SAAiCA,GAAlBA,QAiBcE,CAAYf,GAhC5C,cAACE,EAAA,EAAD,CACpBC,WAAS,EACTG,MAAM,GACNU,UAAQ,EACRT,KAAK,WAqCHU,EAAU,SAACC,EAAiBC,GAAlB,OAAkC,cAACC,EAAA,EAAD,CAAgBC,WAAS,EAACC,MAAI,EAACC,QAAS,EAAxC,SAC7CL,EAAIN,KAAI,SAACZ,EAAMwB,GAAP,OAPI,SAACxB,EAAgBmB,GAC9B,OAAO,cAACC,EAAA,EAAD,CAAgBE,MAAI,EAACG,GAAI,EAAzB,SACF1B,EAAgBC,IADHmB,GAMOO,CAAS1B,EAAMwB,OADiBL,IAKhDQ,EAA4C,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACtEC,qBAAU,WAEN,OADAC,QAAQC,IAAI,wBACL,kBAAMD,QAAQC,IAAI,6BAC1B,IAEH,IADA,IAAMC,EAA0B,GACvBC,EAAI,EAAGA,EAAIN,EAAMM,IAAK,CAC3B,IAAMC,EAAUN,EAASK,EAAI,GAC7BD,EAAUC,GAAK,GACf,IAAK,IAAIE,EAAI,EAAGA,EAAIT,EAASS,IAKzBH,EAAUC,GAAGE,GAJRD,EAIaA,EAAQC,EAAI,GAHR,KAO9B,OADAL,QAAQC,IAAI,wBACL,cAACb,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGK,QAASA,EAArC,SACFM,EAAUtB,KAAI,SAACM,EAAKC,GAAN,OAAcF,EAAQC,EAAKC,SCMnCmB,MAnFf,WAAgB,IAAD,EAEyBC,mBAA4B,CAACV,KAAM,EAAGD,QAAS,EAAGE,SAAU,KAFrF,mBAEJU,EAFI,KAEQC,EAFR,KA6CX,OACI,eAAC,IAAMC,SAAP,WACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACI,eAACC,EAAA,EAAD,WACI,eAAC1B,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,UACI,cAACH,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,EAAf,SACI,cAACvB,EAAA,EAAD,CACI6C,OAAO,SACPC,WAAS,EACT7C,WAAS,EACT0B,KAAM,GACNoB,SApBG,SAACC,GACvBA,EAAMC,OAAO7C,OAlCG,SAAC8C,GACtB,IACMC,EAAS,CAAExB,KAAK,EAAGD,QAAQ,EAAGE,SADnB,IAEjBsB,EAAO1C,MAAM,MAAM4C,SAAQ,SAACC,GACxB,GAAKA,EAAL,CAGA,IAAMC,EAAQD,EAAI7C,MAAM,KAClBQ,GAAOsC,EAAM,GACbC,GAAUD,EAAM,GAElBH,EAAOxB,KAAOX,IACdmC,EAAOxB,KAAOX,GAGdmC,EAAOzB,QAAU6B,IACjBJ,EAAOzB,QAAU6B,GAGrB,IAAMzD,EAAiB,CACnBK,MAAOmD,EAAM,GACbvD,KAAMuD,EAAM,GACZlD,MAAOkD,EAAM,IAGZH,EAAOvB,SAASZ,KACjBmC,EAAOvB,SAASZ,GAAO,IAE3BmC,EAAOvB,SAASZ,GAAKuC,GAAUzD,MAEnCyC,EAAcY,GAQdK,CAD+BR,EAAMC,OAAO7C,YAmB5B,eAACc,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,EAAf,UACI,mDACA,6DACA,+BACI,uFACA,sEACA,sEACA,oEACI,+BACI,sGACA,qHAMpB,cAAC,EAAD,eAAkBe,aCtEvBmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.cccf38c0.chunk.js","sourcesContent":["import Grid from \"@mui/material/Grid\";\nimport React, {useEffect} from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport MenuItem from \"@mui/material/MenuItem\";\n\nconst TEXT_INPUT = 'TEXT_INPUT'\nconst SELECT = 'SELECT'\n\nexport interface ElementsGridProps {\n    columns: number;\n    rows: number;\n    gridData: { [key: number]: GridCell[] };\n}\n\nexport interface GridCell {\n    title: string;\n    type: string;\n    value: string;\n}\n\nconst emptyCell = () => <TextField\n    fullWidth\n    value=''\n    disabled\n    size=\"small\"\n/>\n\nconst selectField = (cell: GridCell) => {\n    const opts = cell.value.split(\",\");\n    return <TextField\n        select\n        fullWidth\n        helperText={cell.title}\n        value={opts[0]}\n        size=\"small\">\n        {opts.map((opt) => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}\n    </TextField>\n}\n\n\nconst textField = (cell: GridCell) => <TextField\n    fullWidth\n    helperText={cell.title}\n    value={cell.value}\n    size=\"small\"\n/>\n\n\nconst gridCellElement = (cell: GridCell) => {\n    if (!cell) {\n        return emptyCell();\n    }\n    return cell.type === TEXT_INPUT ? textField(cell) : selectField(cell);\n}\n\nconst gridCell = (cell: GridCell, idx: number) => {\n    return <Grid key={idx} item xs={1}>\n        {gridCellElement(cell)}\n    </Grid>;\n}\n\nconst gridRow = (row: GridCell[], idx: number) => <Grid key={idx} container item spacing={3}>\n    {row.map((cell, cIdx) => gridCell(cell, cIdx))}\n</Grid>\n\n\nexport const ElementsGrid: React.FC<ElementsGridProps> = ({columns, rows, gridData}) => {\n    useEffect(() => {\n        console.log(\"ElementsGrid created\");\n        return () => console.log(\"ElementsGrid destroyed\");\n    }, []);\n    const gridItems: GridCell[][] = [];\n    for (let i = 0; i < rows; i++) {\n        const rowData = gridData[i + 1];\n        gridItems[i] = [];\n        for (let j = 0; j < columns; j++) {\n            if (!rowData) {\n                gridItems[i][j] = null as any;\n                continue;\n            }\n            gridItems[i][j] = rowData[j + 1];\n        }\n    }\n    console.log(\"ElementsGrid updated\");\n    return <Grid container spacing={2} columns={columns}>\n        {gridItems.map((row, idx) => gridRow(row, idx))}\n    </Grid>;\n}\n","import React, {useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\nimport {ElementsGrid, ElementsGridProps, GridCell} from \"./components/ElementsGrid\";\nimport Grid from \"@mui/material/Grid\";\n\nfunction App() {\n\n    const [definition, setDefinition] = useState<ElementsGridProps>({rows: 0, columns: 0, gridData: {}});\n\n    const parseDefinitions = (defStr: string): void => {\n        const gridData = {} as { [key: number]: GridCell[] }\n        const newDef = { rows:0, columns:0, gridData}\n        defStr.split(\"\\n\").forEach((str) => {\n            if (!str) {\n                return;\n            }\n            const parts = str.split(\";\");\n            const row = +parts[0];\n            const column = +parts[1];\n\n            if (newDef.rows < row) {\n                newDef.rows = row\n            }\n\n            if (newDef.columns < column) {\n                newDef.columns = column\n            }\n\n            const cell: GridCell = {\n                title: parts[2],\n                type: parts[3],\n                value: parts[4]\n            }\n\n            if (!newDef.gridData[row]) {\n                newDef.gridData[row] = [];\n            }\n            newDef.gridData[row][column] = cell;\n        })\n        setDefinition(newDef)\n    }\n\n    const handleDefinitionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.value) {\n            return\n        }\n        const definitionsStr: string = event.target.value;\n        parseDefinitions(definitionsStr);\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <Container maxWidth=\"lg\">\n                <Box>\n                    <Grid container spacing={2}>\n                        <Grid item xs={5}>\n                            <TextField\n                                margin=\"normal\"\n                                multiline\n                                fullWidth\n                                rows={10}\n                                onChange={handleDefinitionChange}\n                            />\n                        </Grid>\n                        <Grid item xs={7}>\n                            <h4>Supported format:</h4>\n                            <p>LINE;COLUMN;LABEL;TYPE;VALUE</p>\n                            <ul>\n                                <li>LINE/COLUMN - the position of the element in the grid</li>\n                                <li>TYPE - an enum of TEXT_INPUT, SELECT</li>\n                                <li>LABEL - a text label for the element</li>\n                                <li>VALUE - an initial value if needed\n                                    <ul>\n                                        <li>SELECT - value will be a list of options, separated by ‘,’</li>\n                                        <li>TEXT_INPUT - value will be a placeholder for the input, can be empty</li>\n                                    </ul>\n                                </li>\n                            </ul>\n                        </Grid>\n                    </Grid>\n                    <ElementsGrid {...definition}/>\n                </Box>\n            </Container>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}